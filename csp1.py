# -*- coding: utf-8 -*-
"""csp1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1InqZpbx3ATW-BKveM3WYVkX0aeNcQwvx
"""

!pip install python-constraint

from constraint import Problem

problem = Problem()
problem.addVariable('X', [1, 2, 3])
problem.addVariable('Y', [1, 2, 3])
problem.addConstraint(lambda x, y: x != y, ('X', 'Y'))

solutions = problem.getSolutions()
print(solutions)

def print_board(board):
    for i in range(9):
        for j in range(9):
            print(board[i][j], end=" ")
        print()

def find_empty_location(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)  # row, col
    return None

def is_safe(board, row, col, num):
    # Check row
    for x in range(9):
        if board[row][x] == num:
            return False

    # Check column
    for x in range(9):
        if board[x][col] == num:
            return False

    # Check 3x3 box
    start_row = row - row % 3
    start_col = col - col % 3
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False

    return True

def solve_sudoku(board):
    empty = find_empty_location(board)
    if not empty:
        return True  # Solved
    row, col = empty

    for num in range(1, 10):
        if is_safe(board, row, col, num):
            board[row][col] = num

            if solve_sudoku(board):
                return True

            board[row][col] = 0  # Backtrack

    return False

# Example Sudoku puzzle (0 represents empty cells)
board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],

    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],

    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

if solve_sudoku(board):
    print("Sudoku solved successfully!")
    print_board(board)
else:
    print("No solution exists.")

def print_board(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                print(".", end=" ")
            else:
                print(board[i][j], end=" ")
            if (j + 1) % 3 == 0 and j != 8:
                print("|", end=" ")
        print()
        if (i + 1) % 3 == 0 and i != 8:
            print("- - - + - - - + - - -")

def is_safe(board, row, col, num):
    # Check row
    for x in range(9):
        if board[row][x] == num:
            return False
    # Check column
    for x in range(9):
        if board[x][col] == num:
            return False
    # Check 3x3 box
    start_row = row - row % 3
    start_col = col - col % 3
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False
    return True

def is_complete(board):
    for row in board:
        if 0 in row:
            return False
    return True

# Example puzzle with 0 as empty cells
board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],

    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],

    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

print("Welcome to Sudoku!")
print_board(board)

while not is_complete(board):
    try:
        row = int(input("Enter row (1-9): ")) - 1
        col = int(input("Enter column (1-9): ")) - 1
        num = int(input("Enter number (1-9): "))

        if row not in range(9) or col not in range(9) or num not in range(1, 10):
            print("Invalid input. Please enter numbers in the correct range.")
            continue

        if board[row][col] != 0:
            print("Cell is already filled. Try another one.")
            continue

        if not is_safe(board, row, col, num):
            print("Move not allowed by Sudoku rules. Try again.")
            continue

        board[row][col] = num
        print_board(board)

    except ValueError:
        print("Please enter valid integers.")

print("Congratulations! You solved the Sudoku!")

from constraint import Problem, AllDifferentConstraint

problem = Problem()

# Create variables: cell names "A1" to "I9"
rows = "ABCDEFGHI"
cols = "123456789"
cells = [r + c for r in rows for c in cols]

# Initialize variables with domain 1-9
problem.addVariables(cells, range(1, 10))

# Add row constraints
for r in rows:
    problem.addConstraint(AllDifferentConstraint(), [r + c for c in cols])

# Add column constraints
for c in cols:
    problem.addConstraint(AllDifferentConstraint(), [r + c for r in rows])

# Add block constraints
block_starts = [(0, 0), (0, 3), (0, 6),
                (3, 0), (3, 3), (3, 6),
                (6, 0), (6, 3), (6, 6)]

for br, bc in block_starts:
    block = []
    for dr in range(3):
        for dc in range(3):
            r = rows[br + dr]
            c = cols[bc + dc]
            block.append(r + c)
    problem.addConstraint(AllDifferentConstraint(), block)

# Example puzzle (0 means empty cell)
given_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],

    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],

    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Set constraints for known values
for i in range(9):
    for j in range(9):
        if given_board[i][j] != 0:
            cell = rows[i] + cols[j]
            problem.addConstraint(lambda v, val=given_board[i][j]: v == val, [cell])

# Solve the puzzle
solution = problem.getSolution()

if solution:
    # Print the solved board
    for r in rows:
        print([solution[r + c] for c in cols])
else:
    print("No solution found.")

import math

# Initialize the board
board = [' ' for _ in range(9)]

# Function to print the board
def print_board(board):
    for i in range(3):
        print(board[i*3] + ' | ' + board[i*3 + 1] + ' | ' + board[i*3 + 2])
        if i < 2:
            print('--+---+--')

# Function to check for a win or draw
def check_winner(board):
    win_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns
        [0, 4, 8], [2, 4, 6]              # diagonals
    ]
    for combo in win_combinations:
        a, b, c = combo
        if board[a] == board[b] == board[c] and board[a] != ' ':
            return board[a]
    if ' ' not in board:
        return 'Draw'
    return None

# Minimax function
def minimax(board, depth, is_maximizing):
    result = check_winner(board)
    if result == 'X':
        return 1
    elif result == 'O':
        return -1
    elif result == 'Draw':
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

# Function to find the best move for 'X'
def best_move(board):
    best_score = -math.inf
    move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                move = i
    return move

# Main game loop
def play_game():
    current_player = 'X'
    while True:
        print_board(board)
        winner = check_winner(board)
        if winner:
            if winner == 'Draw':
                print("It's a draw!")
            else:
                print(f"{winner} wins!")
            break

        if current_player == 'X':
            print("Computer's turn:")
            move = best_move(board)
        else:
            print("Your turn:")
            move = int(input("Enter your move (0-8): "))

        if board[move] == ' ':
            board[move] = current_player
            current_player = 'O' if current_player == 'X' else 'X'
        else:
            print("Invalid move! Try again.")

play_game()